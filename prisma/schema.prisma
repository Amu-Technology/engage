// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model User {
  id           String        @id @default(cuid())
  email        String        @unique
  name         String?
  image        String?
  role         String?       @default("user")
  org_id       Int?
  createdAt    DateTime      @default(now())
  updatedAt    DateTime      @updatedAt
  googleId     String?       @unique
  organization Organization? @relation(fields: [org_id], references: [id])
  Payment      Payment[]
}

model Organization {
  id                      Int                      @id @default(autoincrement())
  name                    String
  users                   User[]
  leads                   Lead[]
  tasks                   Task[]
  events                  Event[]
  memos                   Memo[]
  memoTypes               MemoType[]
  groups                  Group[]
  leadsStatuses           LeadsStatus[]
  activityTypes           ActivityType[]
  familyMembers           FamilyMember[]
  snsAccounts             SnsAccount[]
  notificationPreferences NotificationPreference[]
  leadGroups              LeadGroup[]
  leadActivities          LeadActivity[]
  leadStatusHistories     LeadStatusHistory[]
  paymentTypes            PaymentType[]
  createdAt               DateTime                 @default(now())
  updatedAt               DateTime                 @updatedAt
  Payment                 Payment[]
}

model Group {
  id             String         @id @default(cuid())
  name           String
  organizationId Int
  organization   Organization   @relation(fields: [organizationId], references: [id])
  createdAt      DateTime       @default(now())
  updatedAt      DateTime       @updatedAt
  leads          LeadGroup[]
  leadActivities LeadActivity[]
}

model Lead {
  id                      String                  @id @default(cuid())
  organizationId          Int
  groups                  LeadGroup[]
  type                    String                  @default("individual")
  name                    String
  nameReading             String?
  nickname                String?
  district                String?
  homePhone               String?
  mobilePhone             String?
  company                 String?
  position                String?
  postalCode              String?
  address                 String?
  phone                   String?
  email                   String?
  referrer                String?
  evaluation              Int?                    @default(0)
  status                  String                  @default("potential")
  statusId                String?
  leadsStatus             LeadsStatus?            @relation(fields: [statusId], references: [id])
  profileImagePath        String?
  businessCardPath        String?
  isPaid                  Boolean                 @default(false)
  createdAt               DateTime                @default(now())
  updatedAt               DateTime                @updatedAt
  organization            Organization            @relation(fields: [organizationId], references: [id])
  familyMembers           FamilyMember[]
  snsAccounts             SnsAccount?
  notificationPreferences NotificationPreference?
  tasks                   Task[]
  events                  Event[]
  memos                   Memo[]
  activities              LeadActivity[]
  statusHistory           LeadStatusHistory[]
  Payment                 Payment[]
}

model FamilyMember {
  id             String       @id @default(cuid())
  leadId         String
  organizationId Int
  name           String
  nameReading    String?
  relationship   String?
  lead           Lead         @relation(fields: [leadId], references: [id])
  organization   Organization @relation(fields: [organizationId], references: [id])
  createdAt      DateTime     @default(now())
  updatedAt      DateTime     @updatedAt
}

model SnsAccount {
  id                String       @id @default(cuid())
  leadId            String       @unique
  organizationId    Int
  lineUserId        String?
  facebookUserId    String?
  facebookPageId    String?
  twitterHandle     String?
  instagramUsername String?
  lead              Lead         @relation(fields: [leadId], references: [id])
  organization      Organization @relation(fields: [organizationId], references: [id])
  createdAt         DateTime     @default(now())
  updatedAt         DateTime     @updatedAt
}

model NotificationPreference {
  id             String       @id @default(cuid())
  leadId         String       @unique
  organizationId Int
  email          Boolean      @default(false)
  emailAddress   String?
  intervalDays   Int?         @default(7)
  line           Boolean      @default(false)
  facebook       Boolean      @default(false)
  instagram      Boolean      @default(false)
  lead           Lead         @relation(fields: [leadId], references: [id])
  organization   Organization @relation(fields: [organizationId], references: [id])
  createdAt      DateTime     @default(now())
  updatedAt      DateTime     @updatedAt
}

model Task {
  id             String       @id @default(cuid())
  organizationId Int
  type           String
  assignee       String
  dueDate        DateTime
  status         String       @default("pending")
  relatedLeadId  String?
  createdAt      DateTime     @default(now())
  updatedAt      DateTime     @updatedAt
  organization   Organization @relation(fields: [organizationId], references: [id])
  lead           Lead?        @relation(fields: [relatedLeadId], references: [id])
}

model Event {
  id             String         @id @default(cuid())
  organizationId Int
  title          String
  startDate      DateTime
  endDate        DateTime
  location       String?
  description    String?        // 説明フィールドを追加
  createdAt      DateTime       @default(now())
  updatedAt      DateTime       @updatedAt
  organization   Organization   @relation(fields: [organizationId], references: [id])
  leads          Lead[]         // 参加リード (任意)
  leadActivities LeadActivity[] // イベントから生成された活動
}

model Memo {
  id             String       @id @default(cuid())
  leadId         String
  organizationId Int
  type           String
  timestamp      DateTime
  note           String
  createdAt      DateTime     @default(now())
  updatedAt      DateTime     @updatedAt
  lead           Lead         @relation(fields: [leadId], references: [id])
  organization   Organization @relation(fields: [organizationId], references: [id])
  memoType       MemoType?    @relation(fields: [type], references: [id])
}

model MemoType {
  id             String       @id @default(cuid())
  name           String
  color          String?
  organizationId Int
  organization   Organization @relation(fields: [organizationId], references: [id])
  memos          Memo[]
  createdAt      DateTime     @default(now())
  updatedAt      DateTime     @updatedAt
}

model LeadsStatus {
  id               String              @id @default(cuid())
  name             String
  color            String?
  organizationId   Int
  organization     Organization        @relation(fields: [organizationId], references: [id])
  leads            Lead[]
  oldStatusHistory LeadStatusHistory[] @relation("OldStatus")
  newStatusHistory LeadStatusHistory[] @relation("NewStatus")
  createdAt        DateTime            @default(now())
  updatedAt        DateTime            @updatedAt
}

model LeadGroup {
  id             String       @id @default(cuid())
  leadId         String
  groupId        String
  organizationId Int
  lead           Lead         @relation(fields: [leadId], references: [id])
  group          Group        @relation(fields: [groupId], references: [id])
  organization   Organization @relation(fields: [organizationId], references: [id])
  createdAt      DateTime     @default(now())
  updatedAt      DateTime     @updatedAt
  @@unique([leadId, groupId])
}

model ActivityType {
  id             String         @id @default(cuid())
  name           String
  color          String?
  point          Int            @default(0)
  organizationId Int
  organization   Organization   @relation(fields: [organizationId], references: [id])
  activities     LeadActivity[]
  createdAt      DateTime       @default(now())
  updatedAt      DateTime       @updatedAt
}

// 新規モデル: Payment
// 新規モデル: PaymentType
model PaymentType {
  id             String   @id @default(cuid())
  name           String // 入金タイプ名（例：「年会費」「商品A」「寄付」など）
  organizationId Int // どの組織の入金タイプか
  createdAt      DateTime @default(now())
  updatedAt      DateTime @updatedAt

  organization Organization @relation(fields: [organizationId], references: [id])
  payments     Payment[] // このタイプに属する入金一覧
}

model Payment {
  id             String   @id @default(cuid())
  amount         Int // 金額
  paymentDate    DateTime // 入金日
  description    String? // 摘要
  paymentTypeId  String? // PaymentTypeへの外部キー
  leadId         String // どのリードからの入金か
  organizationId Int // どの組織の入金か
  recordedById   String // 誰が記録したか
  createdAt      DateTime @default(now())
  updatedAt      DateTime @updatedAt
  lead         Lead          @relation(fields: [leadId], references: [id])
  organization Organization  @relation(fields: [organizationId], references: [id])
  recordedBy   User          @relation(fields: [recordedById], references: [id])
  paymentType  PaymentType?  @relation(fields: [paymentTypeId], references: [id]) // PaymentTypeとのリレーション
  activity     LeadActivity?
}

model LeadActivity {
  id             String        @id @default(cuid())
  leadId         String
  eventId        String?       // Eventとの関連キー
  groupId        String?       // Groupとの関連キー
  organizationId Int
  lead           Lead          @relation(fields: [leadId], references: [id])
  event          Event?        @relation(fields: [eventId], references: [id])
  type           String
  typeId         String
  activityType   ActivityType? @relation(fields: [typeId], references: [id])
  description    String?       // 任意項目に変更
  organization   Organization  @relation(fields: [organizationId], references: [id])
  createdAt      DateTime      @default(now())
  updatedAt      DateTime      @updatedAt

  paymentId String?  @unique
  payment   Payment? @relation(fields: [paymentId], references: [id])
  group     Group?   @relation(fields: [groupId], references: [id])
}


model LeadStatusHistory {
  id             String       @id @default(cuid())
  leadId         String
  organizationId Int
  lead           Lead         @relation(fields: [leadId], references: [id])
  oldStatusId    String?
  newStatusId    String
  oldStatus      LeadsStatus? @relation("OldStatus", fields: [oldStatusId], references: [id])
  newStatus      LeadsStatus  @relation("NewStatus", fields: [newStatusId], references: [id])
  organization   Organization @relation(fields: [organizationId], references: [id])
  createdAt      DateTime     @default(now())
  updatedAt      DateTime     @updatedAt
}
